#include "stdafx.h"
#include "CppUnitTest.h"
#include "Layer.h"

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace MaxPoolLayerTests
{
  TEST_CLASS(MaxPoolLayerTests)
  {
  public:
	TEST_METHOD(MaxPoolingLayerFeedForward)
	{
	  double inputs[3 * 6 * 6] =
	  {
		-0.96678, -0.78373, -0.55794, 0.61000, 0.15480, 0.54525,
		0.51857, 0.98925, 0.73807, -0.21690, 0.22571, 0.74447,
		-0.84138, 0.46042, 0.72620, -0.06277, 0.83815, 0.71590,
		0.25999, -0.21358, 0.07483, 0.68542, 0.35257, 0.65511,
		-0.31429, 0.49485, 0.37355, -0.72522, -0.05983, -0.85455,
		0.73681, 0.01262, 0.47648, -0.81299, 0.82210, -0.52620,
		0.46272, -0.43281, -0.23503, 0.20874, -0.34779, -0.04097,
		-0.30844, 0.98802, 0.67215, -0.88021, 0.53604, -0.50555,
		-0.13694, 0.79932, -0.34098, -0.17982, 0.27516, 0.85690,
		0.29730, 0.73544, -0.81252, 0.21409, -0.15505, 0.03118,
		-0.91480, -0.90857, -0.18155, 0.64351, -0.24117, -0.07476,
		-0.24550, -0.50893, -0.42020, 0.32371, -0.92890, -0.67828,
		0.70364, -0.67919, -0.03534, 0.22645, -0.26145, -0.07216,
		0.29211, 0.69104, -0.07076, -0.89246, -0.60748, 0.98246,
		0.38547, 0.09226, -0.81086, -0.37228, -0.77526, 0.55240,
		0.20032, -0.83777, 0.74169, 0.58163, -0.74490, 0.11393,
		0.10815, 0.23209, 0.41872, -0.86880, -0.98406, 0.29992,
		-0.93250, -0.14714, -0.05385, 0.28263, -0.77603, 0.16565
	  };
	  double expectedOutputs[3 * 3 * 3] =
	  {
		0.98925, 0.73807, 0.74447,
		0.46042, 0.7262, 0.83815,
		0.73681, 0.47648, 0.8221,
		0.98802, 0.67215, 0.53604,
		0.79932, 0.21409, 0.8569,
		-0.2455, 0.64351, -0.07476,
		0.70364, 0.22645, 0.98246,
		0.38547, 0.74169, 0.5524,
		0.23209, 0.41872, 0.29992
	  };

  	  Tensor inputTensor(std::initializer_list<double>(inputs, inputs + (3 * 6 * 6)), 3, 6, 6);
	  Tensor outputTensor(3, 3, 3);
	  MaxPoolingLayer layer(3, 6, 6);
	  layer.FeedForward(inputTensor, outputTensor, nullptr);
	  int i = 0;
	  for (int channel = 0; channel < 3; ++channel)
	  {
		for (int row = 0; row < 3; ++row)
		{
		  for (int col = 0; col < 3; ++col)
		  {
			Assert::AreEqual(expectedOutputs[i++], outputTensor.Get(channel, row, col));
		  }
		}
	  }
	}

	TEST_METHOD(MaxPoolingLayerBackpropagateError)
	{
	  double inputs[3 * 6 * 6] =
	  {
		-0.96678, -0.78373, -0.55794, 0.61000, 0.15480, 0.54525,
		0.51857, 0.98925, 0.73807, -0.21690, 0.22571, 0.74447,
		-0.84138, 0.46042, 0.72620, -0.06277, 0.83815, 0.71590,
		0.25999, -0.21358, 0.07483, 0.68542, 0.35257, 0.65511,
		-0.31429, 0.49485, 0.37355, -0.72522, -0.05983, -0.85455,
		0.73681, 0.01262, 0.47648, -0.81299, 0.82210, -0.52620,
		0.46272, -0.43281, -0.23503, 0.20874, -0.34779, -0.04097,
		-0.30844, 0.98802, 0.67215, -0.88021, 0.53604, -0.50555,
		-0.13694, 0.79932, -0.34098, -0.17982, 0.27516, 0.85690,
		0.29730, 0.73544, -0.81252, 0.21409, -0.15505, 0.03118,
		-0.91480, -0.90857, -0.18155, 0.64351, -0.24117, -0.07476,
		-0.24550, -0.50893, -0.42020, 0.32371, -0.92890, -0.67828,
		0.70364, -0.67919, -0.03534, 0.22645, -0.26145, -0.07216,
		0.29211, 0.69104, -0.07076, -0.89246, -0.60748, 0.98246,
		0.38547, 0.09226, -0.81086, -0.37228, -0.77526, 0.55240,
		0.20032, -0.83777, 0.74169, 0.58163, -0.74490, 0.11393,
		0.10815, 0.23209, 0.41872, -0.86880, -0.98406, 0.29992,
		-0.93250, -0.14714, -0.05385, 0.28263, -0.77603, 0.16565
	  };

	  double ouputs[3 * 3 * 3] =
	  {
		0.98925, 0.73807, 0.74447,
		0.46042, 0.7262, 0.83815,
		0.73681, 0.47648, 0.8221,
		0.98802, 0.67215, 0.53604,
		0.79932, 0.21409, 0.8569,
		-0.2455, 0.64351, -0.07476,
		0.70364, 0.22645, 0.98246,
		0.38547, 0.74169, 0.5524,
		0.23209, 0.41872, 0.29992
	  };

	  double ouputErrors[3 * 3 * 3] =
	  {
		-0.18311, 0.12473, 0.15708,
		-0.16376, 0.40924, 0.12668,
		-0.17729, -0.02611, 0.29592,
		0.28514, 0.16530, -0.02191,
		-0.47523, 0.21795, -0.37500,
		-0.29675, 0.44936, 0.24825,
		-0.21722, -0.14042, -0.48572,
		0.03497, -0.14339, 0.40712,
		-0.22507, -0.09533, -0.49130
	  };

  	  Tensor inputTensor(std::initializer_list<double>(inputs, inputs + (3 * 6 * 6)), 3, 6, 6);
	  Tensor outputTensor(std::initializer_list<double>(ouputs, ouputs + (3 * 3 * 3)), 3, 3, 3);
	  Tensor inputErrorTensor(3, 6, 6);
	  Tensor outputErrorTensor(std::initializer_list<double>(ouputErrors, ouputErrors + (3 * 3 * 3)), 3, 3, 3);
	  MaxPoolingLayer layer(3, 6, 6);
	  layer.BackpropagateError(outputTensor, inputTensor, outputErrorTensor, inputErrorTensor);

	  for (int channel = 0; channel < 3; ++channel)
	  {
		for (int row = 0; row < 6; ++row)
		{
		  for (int col = 0; col < 6; ++col)
		  {
			std::wostringstream msg;
			msg << "Mismatch at channel " << channel << ", row " << row << ", column " << col;
			if (inputTensor.Get(channel, row, col) == outputTensor.Get(channel, row / 2, col / 2))
			  Assert::AreEqual(outputErrorTensor.Get(channel, row / 2, col / 2), inputErrorTensor.Get(channel, row, col), msg.str().c_str());
			else
			  Assert::AreEqual(0.0, inputErrorTensor.Get(channel, row, col), msg.str().c_str());	
		  }
		}
	  }
	}
  };
}